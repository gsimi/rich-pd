/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "MyBarrier.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(MyBarrier) 

MyBarrier::MyBarrier(const char *name, const char *title, 
		     RooAbsReal& _x,
		     RooAbsReal& _x0,
		     RooAbsReal& _width,
		     RooAbsReal& _sigma) :
RooAbsPdf(name,title), 
  x("x","x",this,_x),
  x0("x0","x0",this,_x0),
  width("width","width",this,_width),
  sigma("sigma","sigma",this,_sigma)
{ 
} 


 MyBarrier::MyBarrier(const MyBarrier& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   x0("x0",this,other.x0),
   width("width",this,other.width),
   sigma("sigma",this,other.sigma)
 { 
 } 



 Double_t MyBarrier::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   double z1=(x-x0)/sigma/sqrt(2);
   double z2=(x-x0-width)/sigma/sqrt(2);
   double val= z1/sqrt(1+z1*z1) - z2/sqrt(1+z2*z2);
   return val ; 
 } 

Int_t MyBarrier::getAnalyticalIntegral(RooArgSet& allVars, 
				   RooArgSet& analVars, 
				   const char* ) const
{
  if (matchArgs(allVars,analVars,x)) return 1 ;
  return 0 ;
}

Double_t MyBarrier::analyticalIntegral(Int_t code,
				   const char* ) const
{
  double z1min=(x.min()-x0)/sigma/sqrt(2);
  double z1max=(x.max()-x0)/sigma/sqrt(2);
  double z2min=(x.min()-x0-width)/sigma/sqrt(2);
  double z2max=(x.max()-x0-width)/sigma/sqrt(2);
  
  double valmax=sqrt(1+z1max*z1max) - sqrt(1+z2max*z2max) ;
  double valmin=sqrt(1+z1min*z1min) - sqrt(1+z2min*z2min);

  return sigma*sqrt(2)*(valmax-valmin);
}

