/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "MyExp.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(MyExp) 

MyExp::MyExp(const char *name, const char *title, 
	     RooAbsReal& _x,
	     RooAbsReal& _alpha,
	     RooAbsReal& _x0) :
RooAbsPdf(name,title), 
  x("x","x",this,_x),
  alpha("alpha","alpha",this,_alpha),
  x0("x0","x0",this,_x0)
{ 
} 


 MyExp::MyExp(const MyExp& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   alpha("alpha",this,other.alpha),
   x0("x0",this,other.x0)
 { 
 } 



 Double_t MyExp::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   double val=(x>x0)*TMath::Exp(-alpha*(x-x0));
   return val ; 
 } 

Int_t MyExp::getAnalyticalIntegral(RooArgSet& allVars, 
				   RooArgSet& analVars, 
				   const char* ) const
{
  if (matchArgs(allVars,analVars,x)) return 1 ;
  return 0 ;
}

Double_t MyExp::analyticalIntegral(Int_t code,
				   const char* ) const
{
  Double_t fxmin=x.min()>x0? TMath::Exp(-alpha* (x.min()-x0)) : 1;
  Double_t fxmax=x.max()>x0? TMath::Exp(-alpha* (x.max()-x0)) : 1;

  return -(fxmax-fxmin)/alpha;
}

